import streamlit as st
import pandas as pd
import numpy as np
import altair as alt

st.title("HR-–∞—Å—Å–∏—Å—Ç–µ–Ω—Ç –ø–æ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—é —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ (–¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏)")

# 1Ô∏è‚É£ –ó–∞–≥—Ä—É–∑–∫–∞ Excel
uploaded_file = st.file_uploader("–ó–∞–≥—Ä—É–∑–∏—Ç–µ Excel —Ñ–∞–π–ª —Å –¥–∞–Ω–Ω—ã–º–∏ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # 2Ô∏è‚É£ –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è
    df['Group'] = '–û—Å—Ç–∞–ª—å–Ω—ã–µ'
    df.loc[(df['age_score'] < 30) & (df['dependents_score'] == 0) & (df['health_score'] >= 3), 'Group'] = '–ú–æ–ª–æ–¥—ã–µ –±–µ–∑ –¥–µ—Ç–µ–π, –Ω–∏–∑–∫–∏–π —Ä–∏—Å–∫'
    df.loc[(df['age_score'] < 30) & ((df['dependents_score'] > 0) | (df['health_score'] == 2)), 'Group'] = '–ú–æ–ª–æ–¥—ã–µ —Å –¥–µ—Ç—å–º–∏ / —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫'
    df.loc[(df['age_score'] >= 30) & (df['age_score'] < 50) & (df['dependents_score'] > 0), 'Group'] = '–í–∑—Ä–æ—Å–ª—ã–µ —Å –¥–µ—Ç—å–º–∏ / —Å—Ä–µ–¥–Ω–∏–π —Ä–∏—Å–∫'
    df.loc[(df['age_score'] >= 50) | (df['health_score'] < 2), 'Group'] = '–°—Ç–∞—Ä—à–∏–µ / –≤—ã—Å–æ–∫–∏–µ —Ä–∏—Å–∫–∏'
    df.loc[(df['seniority_score'] >= 10) | (df['Total_Score'] >= 14), 'Group'] = '–û–ø—ã—Ç–Ω—ã–µ / –ª–∏–¥–µ—Ä—ã'

    # 3Ô∏è‚É£ –ü–æ–¥—Å—á—ë—Ç –∫–æ–ª–∏—á–µ—Å—Ç–≤–∞ –∏ —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    group_stats = df.groupby('Group').agg(
        –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ=('Group', 'count'),
        –°—Ä–µ–¥–Ω–∏–π_Total_Score=('Total_Score', 'mean'),
        –°—Ä–µ–¥–Ω–∏–π_health_score=('health_score', 'mean')
    ).reset_index()

    st.subheader("üìä –°–µ–≥–º–µ–Ω—Ç–∞—Ü–∏—è —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤")
    st.table(group_stats)

    # 4Ô∏è‚É£ –ö—Ä–∞—Å–∏–≤—ã–π –≥—Ä–∞—Ñ–∏–∫ —Å –æ—Ç—Ç–µ–Ω–∫–∞–º–∏ –∑–µ–ª—ë–Ω–æ–≥–æ
    st.subheader("üìâ –†–∞—Å–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤ –ø–æ –≥—Ä—É–ø–ø–∞–º")
    chart = alt.Chart(group_stats).mark_bar().encode(
        x=alt.X('Group', sort='-y', title="–ì—Ä—É–ø–ø–∞"),
        y=alt.Y('–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ', title="–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤"),
        color=alt.Color('Group', scale=alt.Scale(scheme='greens'))
    ).properties(width=700, height=400)
    st.altair_chart(chart)

    # 5Ô∏è‚É£ –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –¥–∏–Ω–∞–º–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π
    def generate_recommendation(row):
        template_options = [
            "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è {package}. –°—Ä–µ–¥–Ω–∏–π Total_Score: {score:.1f}, —Ä–∏—Å–∫ –∑–¥–æ—Ä–æ–≤—å—è: {health:.1f}. –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ –º–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –ø–ª–∞—Ç–Ω—ã–µ –æ–ø—Ü–∏–∏.",
            "–ü–∞–∫–µ—Ç {package} –æ–ø—Ç–∏–º–∞–ª–µ–Ω –¥–ª—è —ç—Ç–æ–π –≥—Ä—É–ø–ø—ã ({count} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤). –£—á–∏—Ç—ã–≤–∞—è –ø–æ–∫–∞–∑–∞—Ç–µ–ª–∏, —Å—Ç–æ–∏—Ç –¥–æ–±–∞–≤–∏—Ç—å —Ä–∞—Å—à–∏—Ä–µ–Ω–Ω—ã–µ –æ–ø—Ü–∏–∏ —Å—Ç—Ä–∞—Ö–æ–≤–∞–Ω–∏—è.",
            "–î–ª—è –≥—Ä—É–ø–ø—ã –ø—Ä–µ–¥–ª–∞–≥–∞–µ—Ç—Å—è {package}. –°—Ä–µ–¥–Ω–∏–π health_score: {health:.1f}, Total_Score: {score:.1f}. –ú–æ–∂–Ω–æ –ø—Ä–µ–¥–ª–æ–∂–∏—Ç—å –≥–∏–±–∫–∏–µ –±–æ–Ω—É—Å—ã –∏ –∞–ø–≥—Ä–µ–π–¥—ã."
        ]
        if "–ú–æ–ª–æ–¥—ã–µ –±–µ–∑ –¥–µ—Ç–µ–π" in row['Group']:
            package = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç + —Å–ø–æ—Ä—Ç—Å—Ç—Ä–∞—Ö–æ–≤–∫–∞"
        elif "–ú–æ–ª–æ–¥—ã–µ —Å –¥–µ—Ç—å–º–∏" in row['Group']:
            package = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç + –¥–µ—Ç—Å–∫–∞—è —Å—Ç—Ä–∞—Ö–æ–≤–∫–∞"
        elif "–í–∑—Ä–æ—Å–ª—ã–µ —Å –¥–µ—Ç—å–º–∏" in row['Group']:
            package = "–°–µ–º–µ–π–Ω—ã–π –ø–∞–∫–µ—Ç"
        elif "–°—Ç–∞—Ä—à–∏–µ" in row['Group']:
            package = "–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç + —á–µ–∫-–∞–ø—ã"
        elif "–û–ø—ã—Ç–Ω—ã–µ" in row['Group']:
            package = "–ü—Ä–µ–º–∏—É–º –ø–∞–∫–µ—Ç + –∫–æ—Ä–ø–æ—Ä–∞—Ç–∏–≤–Ω—ã–µ –±–æ–Ω—É—Å—ã"
        else:
            package = "–°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø–∞–∫–µ—Ç"
        template = np.random.choice(template_options)
        return template.format(package=package, count=row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ'], score=row['–°—Ä–µ–¥–Ω–∏–π_Total_Score'], health=row['–°—Ä–µ–¥–Ω–∏–π_health_score'])

    group_stats['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è'] = group_stats.apply(generate_recommendation, axis=1)

    # 6Ô∏è‚É£ –§–∏–ª—å—Ç—Ä –ø–æ –≥—Ä—É–ø–ø–µ (–≤—ã–ø–∞–¥–∞—é—â–∞—è —Å—Ç—Ä–æ–∫–∞)
    st.subheader("üîé –í—ã–±–µ—Ä–∏—Ç–µ –≥—Ä—É–ø–ø—É –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π")
    options = ["–í—Å–µ –≥—Ä—É–ø–ø—ã"] + group_stats['Group'].tolist()
    selected_group = st.selectbox("–ì—Ä—É–ø–ø–∞ —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤", options=options)

    if selected_group == "–í—Å–µ –≥—Ä—É–ø–ø—ã":
        for idx, row in group_stats.iterrows():
            st.write(f"üë• {row['Group']} ({row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤): {row['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']}")
    else:
        filtered = group_stats[group_stats['Group'] == selected_group]
        for idx, row in filtered.iterrows():
            st.write(f"üë• {row['Group']} ({row['–ö–æ–ª–∏—á–µ—Å—Ç–≤–æ']} —Å–æ—Ç—Ä—É–¥–Ω–∏–∫–æ–≤): {row['–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏—è']}")
