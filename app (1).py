import streamlit as st
import pandas as pd
import numpy as np

st.title("HR-ассистент по страхованию сотрудников (расширенные рекомендации)")

# 1️⃣ Загрузка Excel
uploaded_file = st.file_uploader("Загрузите Excel файл с данными сотрудников", type=["xlsx"])
if uploaded_file:
    df = pd.read_excel(uploaded_file)

    # 2️⃣ Сегментация
    df['Group'] = 'Остальные'
    df.loc[(df['age_score'] < 30) & (df['dependents_score'] == 0) & (df['health_score'] >= 3), 'Group'] = 'Молодые без детей, низкий риск'
    df.loc[(df['age_score'] < 30) & ((df['dependents_score'] > 0) | (df['health_score'] == 2)), 'Group'] = 'Молодые с детьми / средний риск'
    df.loc[(df['age_score'] >= 30) & (df['age_score'] < 50) & (df['dependents_score'] > 0), 'Group'] = 'Взрослые с детьми / средний риск'
    df.loc[(df['age_score'] >= 50) | (df['health_score'] < 2), 'Group'] = 'Старшие / высокие риски'
    df.loc[(df['seniority_score'] >= 10) | (df['Total_Score'] >= 14), 'Group'] = 'Опытные / лидеры'

    # 3️⃣ Подсчёт количества и средних значений
    group_stats = df.groupby('Group').agg(
        Количество=('Group', 'count'),
        Средний_Total_Score=('Total_Score', 'mean'),
        Средний_health_score=('health_score', 'mean')
    ).reset_index()

    st.subheader("Сегментация сотрудников")
    st.table(group_stats)

    # 4️⃣ Простой bar chart (без matplotlib)
    st.subheader("График распределения сотрудников по группам")
    chart_data = group_stats.set_index('Group')['Количество']
    st.bar_chart(chart_data)

    # 5️⃣ Расширенные рекомендации
    def generate_recommendation(row):
        if "Молодые без детей" in row['Group']:
            return (
                "Рекомендуется Стандартный пакет + спортстраховка. "
                "Дополнительно можно предложить расширенные опции: "
                "- страхование спортивных травм, "
                "- покрытие путешествий, "
                "- подписку на фитнес-программы. "
                "Это увеличит лояльность и привлечёт молодых специалистов."
            )
        elif "Молодые с детьми" in row['Group']:
            return (
                "Рекомендуется Стандартный пакет + детская страховка. "
                "Дополнительно можно предложить: "
                "- стоматологию для детей, "
                "- страховку на обучение (репетиторы, кружки), "
                "- опцию 'расширенное лечение простуд'. "
                "Это повысит ценность пакета для семей."
            )
        elif "Взрослые с детьми" in row['Group']:
            return (
                "Рекомендуется Семейный пакет. "
                "Дополнительно можно предложить: "
                "- страхование недвижимости, "
                "- юридическую помощь, "
                "- расширенное ДМС для всей семьи. "
                "Это сегмент с высокой готовностью к покупке допуслуг."
            )
        elif "Старшие" in row['Group']:
            return (
                "Рекомендуется Премиум пакет + чек-апы. "
                "Дополнительно стоит предложить: "
                "- страхование от сердечно-сосудистых заболеваний, "
                "- онкопакеты, "
                "- круглосуточную телемедицину. "
                "Это снижает риски и ценится сотрудниками старшего возраста."
            )
        elif "Опытные" in row['Group']:
            return (
                "Рекомендуется Премиум пакет + корпоративные бонусы. "
                "Дополнительно можно предложить: "
                "- страхование путешествий для семьи, "
                "- опцию 'VIP-поликлиника без очередей', "
                "- расширенные социальные программы. "
                "Это ключевые сотрудники, их важно удерживать."
            )
        else:
            return (
                "Рекомендуется Базовый стандартный пакет. "
                "Можно предложить индивидуальные допы в зависимости от потребностей."
            )

    group_stats['Рекомендация'] = group_stats.apply(generate_recommendation, axis=1)

    # 6️⃣ Фильтр по группе
    st.subheader("Выберите группу для просмотра рекомендаций")
    selected_group = st.selectbox("Группа сотрудников", options=group_stats['Group'].tolist())

    filtered = group_stats[group_stats['Group'] == selected_group]
    for idx, row in filtered.iterrows():
        st.write(f"### {row['Group']} ({row['Количество']} сотрудников)")
        st.write(row['Рекомендация'])
